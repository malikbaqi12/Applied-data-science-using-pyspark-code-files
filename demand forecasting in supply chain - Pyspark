{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/malikbaqi12/Applied-data-science-using-pyspark-code-files/blob/main/demand%20forecasting%20in%20supply%20chain%20-%20Pyspark\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "60c5172f"
      },
      "source": [
        "## Demand Forecasting with using Big Data"
      ],
      "id": "60c5172f"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5a6e642b"
      },
      "source": [
        "## Content\n",
        "1. [Introduction](#section-intro)\n",
        "2. [Importing libraries and Kaggle setup](#section-ts)\n",
        "3. [Load Dataset](#section-pro)\n",
        "4. [Basic Exploratory Data Analysis](#section-ten)\n",
        "5. [Feature Engineering](#section-ten)\n",
        "6. [Data Encoding](#section-ten)\n",
        "7. [LightGB Model](#section-ten)\n",
        "8. [Time Series Analysis](#section-ten)   "
      ],
      "id": "5a6e642b"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "568a11d6"
      },
      "source": [
        "## 1. Introduction"
      ],
      "id": "568a11d6"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5acc8a6e"
      },
      "source": [
        "#### Dataset Overview\n",
        "* A store chain's 5-year data includes information on 10 different stores and 50 different products.\n",
        "* The data set covers the period between 01-01-2013 and 31-12-2017."
      ],
      "id": "5acc8a6e"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "f510ab31"
      },
      "source": [
        "#### Business Problem\n",
        "* It is desired to create a 3-month demand forecasting model for 10 different stores and 50 different products of a chain of stores.\n",
        "* Afterwards, it is desired to reduce the data set to weekly and create a demand forecasting model for 2017."
      ],
      "id": "f510ab31"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "951e2930"
      },
      "source": [
        "#### Variables\n",
        "* date – Date of sales data (No holiday effects or store closures)\n",
        "* store - Store ID Unique number for each store.\n",
        "* item - Item ID Unique number for each item.\n",
        "* sales – Number of items sold, Number of items sold from a particular store on a given date"
      ],
      "id": "951e2930"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9d172d27"
      },
      "source": [
        "## 2. Importing Libraries and Kaggle Setup"
      ],
      "id": "9d172d27"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "5e81be15"
      },
      "outputs": [],
      "source": [
        "# Importing Libraries\n",
        "\n",
        "import numpy as np \n",
        "import pandas as pd \n",
        "from matplotlib import pyplot as plt\n",
        "import seaborn as sns\n",
        "import lightgbm as lgb\n",
        "from statsmodels.tsa.holtwinters import SimpleExpSmoothing\n",
        "from sklearn.metrics import mean_absolute_error\n",
        "from statsmodels.tsa.holtwinters import ExponentialSmoothing\n",
        "from statsmodels.tsa.statespace.sarimax import SARIMAX\n",
        "from statsmodels.tsa.arima_model import ARIMA\n",
        "from statsmodels.tsa.seasonal import seasonal_decompose\n",
        "import statsmodels.api as sm\n",
        "import itertools\n",
        "\n",
        "import warnings\n",
        "pd.set_option('display.max_columns', None)\n",
        "pd.set_option('display.width', 500)\n",
        "warnings.filterwarnings('ignore')\n",
        "\n",
        "#Kaggle setup\n",
        "import os\n",
        "for dirname, _, filenames in os.walk('/input'):\n",
        "    for filename in filenames:\n",
        "        print(os.path.join(dirname, filename))\n",
        "\n"
      ],
      "id": "5e81be15"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "13bc2b43"
      },
      "source": [
        "## 3. Load Dataset"
      ],
      "id": "13bc2b43"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 520
        },
        "id": "090b71f6",
        "outputId": "1d40de5a-bff7-4227-921d-08415e35f62b"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-971f9f81-e0ae-4148-bd52-77c7ad0d8796\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>date</th>\n",
              "      <th>store</th>\n",
              "      <th>item</th>\n",
              "      <th>sales</th>\n",
              "      <th>id</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2013-01-01</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>13.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2013-01-02</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>11.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2013-01-03</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>14.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2013-01-04</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>13.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2013-01-05</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>10.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>2013-01-06</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>12.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>2013-01-07</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>10.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>2013-01-08</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>9.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>2013-01-09</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>12.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>2013-01-10</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>9.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>2013-01-11</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>9.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>2013-01-12</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>7.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>2013-01-13</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>10.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>2013-01-14</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>12.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>2013-01-15</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>5.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-971f9f81-e0ae-4148-bd52-77c7ad0d8796')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-971f9f81-e0ae-4148-bd52-77c7ad0d8796 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-971f9f81-e0ae-4148-bd52-77c7ad0d8796');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "         date  store  item  sales  id\n",
              "0  2013-01-01      1     1   13.0 NaN\n",
              "1  2013-01-02      1     1   11.0 NaN\n",
              "2  2013-01-03      1     1   14.0 NaN\n",
              "3  2013-01-04      1     1   13.0 NaN\n",
              "4  2013-01-05      1     1   10.0 NaN\n",
              "5  2013-01-06      1     1   12.0 NaN\n",
              "6  2013-01-07      1     1   10.0 NaN\n",
              "7  2013-01-08      1     1    9.0 NaN\n",
              "8  2013-01-09      1     1   12.0 NaN\n",
              "9  2013-01-10      1     1    9.0 NaN\n",
              "10 2013-01-11      1     1    9.0 NaN\n",
              "11 2013-01-12      1     1    7.0 NaN\n",
              "12 2013-01-13      1     1   10.0 NaN\n",
              "13 2013-01-14      1     1   12.0 NaN\n",
              "14 2013-01-15      1     1    5.0 NaN"
            ]
          },
          "execution_count": 31,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "train = pd.read_csv('train.csv', parse_dates=['date'])\n",
        "test = pd.read_csv('test.csv', parse_dates=['date'])\n",
        "df = pd.concat([train, test], sort=False)\n",
        "df.head(15)"
      ],
      "id": "090b71f6"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "089e42af",
        "outputId": "75256216-999a-4716-86dd-f84c44c43ec8"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Size of train set (913000, 4)\n",
            "Size of test set: (45000, 4)\n"
          ]
        }
      ],
      "source": [
        "print(\"Size of train set\",train.shape)\n",
        "print(\"Size of test set:\",test.shape)"
      ],
      "id": "089e42af"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "c79dddae",
        "outputId": "44403ae9-80f2-4a25-ef57-c420381f783c"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Index(['date', 'store', 'item', 'sales'], dtype='object')"
            ]
          },
          "execution_count": 33,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "#Removing the extra column 'id'\n",
        "df.drop(['id'],inplace=True,axis=1)\n",
        "df.columns"
      ],
      "id": "c79dddae"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "f12a9ee7"
      },
      "source": [
        "## 4. Basic Exploratory data Analysis"
      ],
      "id": "f12a9ee7"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "84a1aaf8",
        "outputId": "9cc190d9-4bd6-479a-d4ca-5e82daaffa07"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Date range: 2013-01-01 00:00:00 to 2018-03-31 00:00:00\n"
          ]
        }
      ],
      "source": [
        "#DATE RANGE\n",
        "\n",
        "print(\"Date range:\", df[\"date\"].min(), \"to\", df[\"date\"].max())\n",
        "#1st Jan 2013 to 31st March, 2018"
      ],
      "id": "84a1aaf8"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "10690550",
        "outputId": "cd08d79b-bf52-4693-cc98-273841723231"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "count    913000.000000\n",
              "mean         52.250287\n",
              "std          28.801144\n",
              "min           0.000000\n",
              "10%          20.000000\n",
              "30%          33.000000\n",
              "50%          47.000000\n",
              "70%          64.000000\n",
              "80%          76.000000\n",
              "90%          93.000000\n",
              "95%         107.000000\n",
              "99%         135.000000\n",
              "max         231.000000\n",
              "Name: sales, dtype: float64"
            ]
          },
          "execution_count": 35,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# SALES DISTRIBUTION\n",
        "\n",
        "df[\"sales\"].describe([0.10, 0.30, 0.50, 0.70, 0.80, 0.90, 0.95, 0.99])"
      ],
      "id": "10690550"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "e573958d",
        "outputId": "edb37a01-6dd4-4696-c9de-809b1c4ea2ac"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "10"
            ]
          },
          "execution_count": 36,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# NUMBER OF STORES\n",
        "\n",
        "df[\"store\"].nunique()"
      ],
      "id": "e573958d"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3523e380",
        "outputId": "d3550ea4-ebb6-456f-d2eb-96c45cf8d124"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "50"
            ]
          },
          "execution_count": 37,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# NUMBER OF PRODUCTS\n",
        "\n",
        "df[\"item\"].nunique() "
      ],
      "id": "3523e380"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "a6dbdbb4",
        "outputId": "f829a059-cdf7-4d7d-a5ac-c433eb643092"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "store\n",
              "1     50\n",
              "2     50\n",
              "3     50\n",
              "4     50\n",
              "5     50\n",
              "6     50\n",
              "7     50\n",
              "8     50\n",
              "9     50\n",
              "10    50\n",
              "Name: item, dtype: int64"
            ]
          },
          "execution_count": 38,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# NUMBER OF PRODUCTS IN EACH STORE\n",
        "df.groupby([\"store\"])[\"item\"].nunique()\n",
        "#Every store sells all the 50 products"
      ],
      "id": "a6dbdbb4"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 486
        },
        "id": "cd3d99d0",
        "outputId": "c6df51aa-caf6-4fd6-ea08-edb2ce9b7d9f"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-31d282c4-78d6-49b7-99a7-468c9fd2d141\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr th {\n",
              "        text-align: left;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr:last-of-type th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th colspan=\"4\" halign=\"left\">sales</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th>sum</th>\n",
              "      <th>mean</th>\n",
              "      <th>median</th>\n",
              "      <th>std</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>store</th>\n",
              "      <th>item</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th rowspan=\"5\" valign=\"top\">1</th>\n",
              "      <th>1</th>\n",
              "      <td>36468.0</td>\n",
              "      <td>19.971522</td>\n",
              "      <td>19.0</td>\n",
              "      <td>6.741022</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>97050.0</td>\n",
              "      <td>53.148959</td>\n",
              "      <td>52.0</td>\n",
              "      <td>15.005779</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>60638.0</td>\n",
              "      <td>33.208105</td>\n",
              "      <td>33.0</td>\n",
              "      <td>10.072529</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>36440.0</td>\n",
              "      <td>19.956188</td>\n",
              "      <td>20.0</td>\n",
              "      <td>6.640618</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>30335.0</td>\n",
              "      <td>16.612815</td>\n",
              "      <td>16.0</td>\n",
              "      <td>5.672102</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"5\" valign=\"top\">10</th>\n",
              "      <th>46</th>\n",
              "      <td>120601.0</td>\n",
              "      <td>66.046550</td>\n",
              "      <td>65.0</td>\n",
              "      <td>18.114991</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>47</th>\n",
              "      <td>45204.0</td>\n",
              "      <td>24.755750</td>\n",
              "      <td>24.0</td>\n",
              "      <td>7.924820</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>48</th>\n",
              "      <td>105570.0</td>\n",
              "      <td>57.814896</td>\n",
              "      <td>57.0</td>\n",
              "      <td>15.898538</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49</th>\n",
              "      <td>60317.0</td>\n",
              "      <td>33.032311</td>\n",
              "      <td>32.0</td>\n",
              "      <td>10.091610</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50</th>\n",
              "      <td>135192.0</td>\n",
              "      <td>74.037240</td>\n",
              "      <td>73.0</td>\n",
              "      <td>19.937566</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>500 rows × 4 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-31d282c4-78d6-49b7-99a7-468c9fd2d141')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-31d282c4-78d6-49b7-99a7-468c9fd2d141 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-31d282c4-78d6-49b7-99a7-468c9fd2d141');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "               sales                             \n",
              "                 sum       mean median        std\n",
              "store item                                       \n",
              "1     1      36468.0  19.971522   19.0   6.741022\n",
              "      2      97050.0  53.148959   52.0  15.005779\n",
              "      3      60638.0  33.208105   33.0  10.072529\n",
              "      4      36440.0  19.956188   20.0   6.640618\n",
              "      5      30335.0  16.612815   16.0   5.672102\n",
              "...              ...        ...    ...        ...\n",
              "10    46    120601.0  66.046550   65.0  18.114991\n",
              "      47     45204.0  24.755750   24.0   7.924820\n",
              "      48    105570.0  57.814896   57.0  15.898538\n",
              "      49     60317.0  33.032311   32.0  10.091610\n",
              "      50    135192.0  74.037240   73.0  19.937566\n",
              "\n",
              "[500 rows x 4 columns]"
            ]
          },
          "execution_count": 39,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Sales statistics in store-product breakdown\n",
        "df.groupby([\"store\", \"item\"]).agg({\"sales\": [\"sum\", \"mean\", \"median\", \"std\"]})"
      ],
      "id": "cd3d99d0"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "f745a3b9"
      },
      "source": [
        "## 5. Feature Engineering"
      ],
      "id": "f745a3b9"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "0ff8c7b1"
      },
      "outputs": [],
      "source": [
        "# Generating date and time parameters from given date\n",
        "\n",
        "df['month'] = df.date.dt.month\n",
        "df['day_of_month'] = df.date.dt.day\n",
        "df['day_of_year'] = df.date.dt.dayofyear \n",
        "df['week_of_year'] = df.date.dt.weekofyear\n",
        "df['day_of_week'] = df.date.dt.dayofweek\n",
        "df['year'] = df.date.dt.year\n",
        "df[\"is_wknd\"] = df.date.dt.weekday // 4\n",
        "df['is_month_start'] = df.date.dt.is_month_start.astype(int)\n",
        "df['is_month_end'] = df.date.dt.is_month_end.astype(int) "
      ],
      "id": "0ff8c7b1"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 357
        },
        "id": "fad80590",
        "outputId": "a2437cc7-fcbb-49d2-8166-0f81a901a7e9"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-23d6b166-e0a3-4e1d-b30b-b676e70586e3\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>date</th>\n",
              "      <th>store</th>\n",
              "      <th>item</th>\n",
              "      <th>sales</th>\n",
              "      <th>month</th>\n",
              "      <th>day_of_month</th>\n",
              "      <th>day_of_year</th>\n",
              "      <th>week_of_year</th>\n",
              "      <th>day_of_week</th>\n",
              "      <th>year</th>\n",
              "      <th>is_wknd</th>\n",
              "      <th>is_month_start</th>\n",
              "      <th>is_month_end</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2013-01-01</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>13.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2013</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2013-01-02</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>11.0</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>2013</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2013-01-03</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>14.0</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>2013</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2013-01-04</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>13.0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>2013</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2013-01-05</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>10.0</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>2013</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-23d6b166-e0a3-4e1d-b30b-b676e70586e3')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-23d6b166-e0a3-4e1d-b30b-b676e70586e3 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-23d6b166-e0a3-4e1d-b30b-b676e70586e3');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "        date  store  item  sales  month  day_of_month  day_of_year  week_of_year  day_of_week  year  is_wknd  is_month_start  is_month_end\n",
              "0 2013-01-01      1     1   13.0      1             1            1             1            1  2013        0               1             0\n",
              "1 2013-01-02      1     1   11.0      1             2            2             1            2  2013        0               0             0\n",
              "2 2013-01-03      1     1   14.0      1             3            3             1            3  2013        0               0             0\n",
              "3 2013-01-04      1     1   13.0      1             4            4             1            4  2013        1               0             0\n",
              "4 2013-01-05      1     1   10.0      1             5            5             1            5  2013        1               0             0"
            ]
          },
          "execution_count": 41,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.head()"
      ],
      "id": "fad80590"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 486
        },
        "id": "089de2f6",
        "outputId": "e1fbdcc1-7c34-4e7e-f998-90f633931a4e"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-b2be5c34-870c-44b2-9356-ed44b0091679\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr th {\n",
              "        text-align: left;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr:last-of-type th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th colspan=\"4\" halign=\"left\">sales</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th>sum</th>\n",
              "      <th>mean</th>\n",
              "      <th>median</th>\n",
              "      <th>std</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>store</th>\n",
              "      <th>item</th>\n",
              "      <th>month</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th rowspan=\"5\" valign=\"top\">1</th>\n",
              "      <th rowspan=\"5\" valign=\"top\">1</th>\n",
              "      <th>1</th>\n",
              "      <td>2125.0</td>\n",
              "      <td>13.709677</td>\n",
              "      <td>13.0</td>\n",
              "      <td>4.397413</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2063.0</td>\n",
              "      <td>14.631206</td>\n",
              "      <td>14.0</td>\n",
              "      <td>4.668146</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2728.0</td>\n",
              "      <td>17.600000</td>\n",
              "      <td>17.0</td>\n",
              "      <td>4.545013</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>3118.0</td>\n",
              "      <td>20.786667</td>\n",
              "      <td>20.0</td>\n",
              "      <td>4.894301</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>3448.0</td>\n",
              "      <td>22.245161</td>\n",
              "      <td>22.0</td>\n",
              "      <td>6.564705</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <th>...</th>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"5\" valign=\"top\">10</th>\n",
              "      <th rowspan=\"5\" valign=\"top\">50</th>\n",
              "      <th>8</th>\n",
              "      <td>13108.0</td>\n",
              "      <td>84.567742</td>\n",
              "      <td>85.0</td>\n",
              "      <td>15.676527</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>11831.0</td>\n",
              "      <td>78.873333</td>\n",
              "      <td>79.0</td>\n",
              "      <td>15.207423</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>11322.0</td>\n",
              "      <td>73.045161</td>\n",
              "      <td>72.0</td>\n",
              "      <td>14.209171</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>11549.0</td>\n",
              "      <td>76.993333</td>\n",
              "      <td>77.0</td>\n",
              "      <td>16.253651</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>8724.0</td>\n",
              "      <td>56.283871</td>\n",
              "      <td>56.0</td>\n",
              "      <td>11.782529</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>6000 rows × 4 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b2be5c34-870c-44b2-9356-ed44b0091679')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-b2be5c34-870c-44b2-9356-ed44b0091679 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-b2be5c34-870c-44b2-9356-ed44b0091679');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "                    sales                             \n",
              "                      sum       mean median        std\n",
              "store item month                                      \n",
              "1     1    1       2125.0  13.709677   13.0   4.397413\n",
              "           2       2063.0  14.631206   14.0   4.668146\n",
              "           3       2728.0  17.600000   17.0   4.545013\n",
              "           4       3118.0  20.786667   20.0   4.894301\n",
              "           5       3448.0  22.245161   22.0   6.564705\n",
              "...                   ...        ...    ...        ...\n",
              "10    50   8      13108.0  84.567742   85.0  15.676527\n",
              "           9      11831.0  78.873333   79.0  15.207423\n",
              "           10     11322.0  73.045161   72.0  14.209171\n",
              "           11     11549.0  76.993333   77.0  16.253651\n",
              "           12      8724.0  56.283871   56.0  11.782529\n",
              "\n",
              "[6000 rows x 4 columns]"
            ]
          },
          "execution_count": 42,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Sales statistics in store-item-month breakdown\n",
        "df.groupby([\"store\", \"item\", \"month\"]).agg({\"sales\": [\"sum\", \"mean\", \"median\", \"std\"]})"
      ],
      "id": "089de2f6"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "bf37f111"
      },
      "outputs": [],
      "source": [
        "#DEALING WITH RAMDOM NOISE\n",
        "# For small datasets like this dataset, random noise can be added to the values ​​to prevent overfitting.\n",
        "# Here I will add Gaussian random noise, which is normally distributed with 1 standard deviation and 0 mean.\n",
        "\n",
        "def random_noise(dataframe):\n",
        "    return np.random.normal(scale=1.6, size=(len(dataframe),))"
      ],
      "id": "bf37f111"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 601
        },
        "id": "9b3ae8d6",
        "outputId": "06b56e66-7c31-4d1a-abdb-11b09de52d57"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-78419124-9fc8-4a27-9701-ce4c861fad2c\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>date</th>\n",
              "      <th>store</th>\n",
              "      <th>item</th>\n",
              "      <th>sales</th>\n",
              "      <th>month</th>\n",
              "      <th>day_of_month</th>\n",
              "      <th>day_of_year</th>\n",
              "      <th>week_of_year</th>\n",
              "      <th>day_of_week</th>\n",
              "      <th>year</th>\n",
              "      <th>is_wknd</th>\n",
              "      <th>is_month_start</th>\n",
              "      <th>is_month_end</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2013-01-01</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>13.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2013</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2013-01-02</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>11.0</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>2013</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2013-01-03</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>14.0</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>2013</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2013-01-04</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>13.0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>2013</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2013-01-05</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>10.0</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>2013</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>2013-01-06</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>12.0</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>2013</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>2013-01-07</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>10.0</td>\n",
              "      <td>1</td>\n",
              "      <td>7</td>\n",
              "      <td>7</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>2013</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>2013-01-08</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>9.0</td>\n",
              "      <td>1</td>\n",
              "      <td>8</td>\n",
              "      <td>8</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>2013</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>2013-01-09</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>12.0</td>\n",
              "      <td>1</td>\n",
              "      <td>9</td>\n",
              "      <td>9</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2013</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>2013-01-10</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>9.0</td>\n",
              "      <td>1</td>\n",
              "      <td>10</td>\n",
              "      <td>10</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>2013</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-78419124-9fc8-4a27-9701-ce4c861fad2c')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-78419124-9fc8-4a27-9701-ce4c861fad2c button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-78419124-9fc8-4a27-9701-ce4c861fad2c');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "        date  store  item  sales  month  day_of_month  day_of_year  week_of_year  day_of_week  year  is_wknd  is_month_start  is_month_end\n",
              "0 2013-01-01      1     1   13.0      1             1            1             1            1  2013        0               1             0\n",
              "1 2013-01-02      1     1   11.0      1             2            2             1            2  2013        0               0             0\n",
              "2 2013-01-03      1     1   14.0      1             3            3             1            3  2013        0               0             0\n",
              "3 2013-01-04      1     1   13.0      1             4            4             1            4  2013        1               0             0\n",
              "4 2013-01-05      1     1   10.0      1             5            5             1            5  2013        1               0             0\n",
              "5 2013-01-06      1     1   12.0      1             6            6             1            6  2013        1               0             0\n",
              "6 2013-01-07      1     1   10.0      1             7            7             2            0  2013        0               0             0\n",
              "7 2013-01-08      1     1    9.0      1             8            8             2            1  2013        0               0             0\n",
              "8 2013-01-09      1     1   12.0      1             9            9             2            2  2013        0               0             0\n",
              "9 2013-01-10      1     1    9.0      1            10           10             2            3  2013        0               0             0"
            ]
          },
          "execution_count": 44,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "#Lag/Shifted Features (Delays)\n",
        "df.sort_values(by=['store', 'item', 'date'], axis=0, inplace=True)\n",
        "df.head(10)"
      ],
      "id": "9b3ae8d6"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "2524ec4f"
      },
      "outputs": [],
      "source": [
        "def lag_features(dataframe, lags):\n",
        "    for lag in lags:\n",
        "        dataframe['sales_lag_' + str(lag)] = dataframe.groupby([\"store\", \"item\"])['sales'].transform(\n",
        "            lambda x: x.shift(lag)) + random_noise(dataframe)\n",
        "    return dataframe\n",
        "\n",
        "df = lag_features(df, [91, 98, 105, 112, 119, 126, 182, 364, 546, 728])"
      ],
      "id": "2524ec4f"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "3a43ca79"
      },
      "outputs": [],
      "source": [
        "#Moving Average Features\n",
        "def moving_average_features(dataframe, windows):\n",
        "    for window in windows:\n",
        "        dataframe['sales_roll_mean_' + str(window)] = dataframe.groupby([\"store\", \"item\"])['sales']. \\\n",
        "                                                          transform(\n",
        "            lambda x: x.shift(1).rolling(window=window, min_periods=10, win_type=\"triang\").mean()) + random_noise(\n",
        "            dataframe)\n",
        "    return dataframe\n",
        "\n",
        "\n",
        "df = moving_average_features(df, [365, 546, 730])\n"
      ],
      "id": "3a43ca79"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "959e7059"
      },
      "outputs": [],
      "source": [
        "#Exponentially Weighted Average Features\n",
        "def ewm_features(dataframe, alphas, lags):\n",
        "    for alpha in alphas:\n",
        "        for lag in lags:\n",
        "            dataframe['sales_ewm_alpha_' + str(alpha).replace(\".\", \"\") + \"_lag_\" + str(lag)] = \\\n",
        "                dataframe.groupby([\"store\", \"item\"])['sales'].transform(lambda x: x.shift(lag).ewm(alpha=alpha).mean())\n",
        "    return dataframe\n",
        "\n",
        "\n",
        "alphas = [0.99, 0.95, 0.9, 0.8, 0.7, 0.5]\n",
        "lags = [91, 98, 105, 112, 180, 270, 365, 546, 728]\n",
        "\n",
        "df = ewm_features(df, alphas, lags)"
      ],
      "id": "959e7059"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eee97bd4"
      },
      "source": [
        "## 6. Data Encoding"
      ],
      "id": "eee97bd4"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4c3a759f",
        "outputId": "ca30c285-8d96-4735-dd66-657542388e37"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Int64Index: 958000 entries, 0 to 44999\n",
            "Data columns (total 80 columns):\n",
            " #   Column                       Non-Null Count   Dtype         \n",
            "---  ------                       --------------   -----         \n",
            " 0   date                         958000 non-null  datetime64[ns]\n",
            " 1   store                        958000 non-null  int64         \n",
            " 2   item                         958000 non-null  int64         \n",
            " 3   sales                        913000 non-null  float64       \n",
            " 4   month                        958000 non-null  int64         \n",
            " 5   day_of_month                 958000 non-null  int64         \n",
            " 6   day_of_year                  958000 non-null  int64         \n",
            " 7   week_of_year                 958000 non-null  int64         \n",
            " 8   day_of_week                  958000 non-null  int64         \n",
            " 9   year                         958000 non-null  int64         \n",
            " 10  is_wknd                      958000 non-null  int64         \n",
            " 11  is_month_start               958000 non-null  int64         \n",
            " 12  is_month_end                 958000 non-null  int64         \n",
            " 13  sales_lag_91                 912500 non-null  float64       \n",
            " 14  sales_lag_98                 909000 non-null  float64       \n",
            " 15  sales_lag_105                905500 non-null  float64       \n",
            " 16  sales_lag_112                902000 non-null  float64       \n",
            " 17  sales_lag_119                898500 non-null  float64       \n",
            " 18  sales_lag_126                895000 non-null  float64       \n",
            " 19  sales_lag_182                867000 non-null  float64       \n",
            " 20  sales_lag_364                776000 non-null  float64       \n",
            " 21  sales_lag_546                685000 non-null  float64       \n",
            " 22  sales_lag_728                594000 non-null  float64       \n",
            " 23  sales_roll_mean_365          953000 non-null  float64       \n",
            " 24  sales_roll_mean_546          953000 non-null  float64       \n",
            " 25  sales_roll_mean_730          953000 non-null  float64       \n",
            " 26  sales_ewm_alpha_099_lag_91   912500 non-null  float64       \n",
            " 27  sales_ewm_alpha_099_lag_98   909000 non-null  float64       \n",
            " 28  sales_ewm_alpha_099_lag_105  905500 non-null  float64       \n",
            " 29  sales_ewm_alpha_099_lag_112  902000 non-null  float64       \n",
            " 30  sales_ewm_alpha_099_lag_180  868000 non-null  float64       \n",
            " 31  sales_ewm_alpha_099_lag_270  823000 non-null  float64       \n",
            " 32  sales_ewm_alpha_099_lag_365  775500 non-null  float64       \n",
            " 33  sales_ewm_alpha_099_lag_546  685000 non-null  float64       \n",
            " 34  sales_ewm_alpha_099_lag_728  594000 non-null  float64       \n",
            " 35  sales_ewm_alpha_095_lag_91   912500 non-null  float64       \n",
            " 36  sales_ewm_alpha_095_lag_98   909000 non-null  float64       \n",
            " 37  sales_ewm_alpha_095_lag_105  905500 non-null  float64       \n",
            " 38  sales_ewm_alpha_095_lag_112  902000 non-null  float64       \n",
            " 39  sales_ewm_alpha_095_lag_180  868000 non-null  float64       \n",
            " 40  sales_ewm_alpha_095_lag_270  823000 non-null  float64       \n",
            " 41  sales_ewm_alpha_095_lag_365  775500 non-null  float64       \n",
            " 42  sales_ewm_alpha_095_lag_546  685000 non-null  float64       \n",
            " 43  sales_ewm_alpha_095_lag_728  594000 non-null  float64       \n",
            " 44  sales_ewm_alpha_09_lag_91    912500 non-null  float64       \n",
            " 45  sales_ewm_alpha_09_lag_98    909000 non-null  float64       \n",
            " 46  sales_ewm_alpha_09_lag_105   905500 non-null  float64       \n",
            " 47  sales_ewm_alpha_09_lag_112   902000 non-null  float64       \n",
            " 48  sales_ewm_alpha_09_lag_180   868000 non-null  float64       \n",
            " 49  sales_ewm_alpha_09_lag_270   823000 non-null  float64       \n",
            " 50  sales_ewm_alpha_09_lag_365   775500 non-null  float64       \n",
            " 51  sales_ewm_alpha_09_lag_546   685000 non-null  float64       \n",
            " 52  sales_ewm_alpha_09_lag_728   594000 non-null  float64       \n",
            " 53  sales_ewm_alpha_08_lag_91    912500 non-null  float64       \n",
            " 54  sales_ewm_alpha_08_lag_98    909000 non-null  float64       \n",
            " 55  sales_ewm_alpha_08_lag_105   905500 non-null  float64       \n",
            " 56  sales_ewm_alpha_08_lag_112   902000 non-null  float64       \n",
            " 57  sales_ewm_alpha_08_lag_180   868000 non-null  float64       \n",
            " 58  sales_ewm_alpha_08_lag_270   823000 non-null  float64       \n",
            " 59  sales_ewm_alpha_08_lag_365   775500 non-null  float64       \n",
            " 60  sales_ewm_alpha_08_lag_546   685000 non-null  float64       \n",
            " 61  sales_ewm_alpha_08_lag_728   594000 non-null  float64       \n",
            " 62  sales_ewm_alpha_07_lag_91    912500 non-null  float64       \n",
            " 63  sales_ewm_alpha_07_lag_98    909000 non-null  float64       \n",
            " 64  sales_ewm_alpha_07_lag_105   905500 non-null  float64       \n",
            " 65  sales_ewm_alpha_07_lag_112   902000 non-null  float64       \n",
            " 66  sales_ewm_alpha_07_lag_180   868000 non-null  float64       \n",
            " 67  sales_ewm_alpha_07_lag_270   823000 non-null  float64       \n",
            " 68  sales_ewm_alpha_07_lag_365   775500 non-null  float64       \n",
            " 69  sales_ewm_alpha_07_lag_546   685000 non-null  float64       \n",
            " 70  sales_ewm_alpha_07_lag_728   594000 non-null  float64       \n",
            " 71  sales_ewm_alpha_05_lag_91    912500 non-null  float64       \n",
            " 72  sales_ewm_alpha_05_lag_98    909000 non-null  float64       \n",
            " 73  sales_ewm_alpha_05_lag_105   905500 non-null  float64       \n",
            " 74  sales_ewm_alpha_05_lag_112   902000 non-null  float64       \n",
            " 75  sales_ewm_alpha_05_lag_180   868000 non-null  float64       \n",
            " 76  sales_ewm_alpha_05_lag_270   823000 non-null  float64       \n",
            " 77  sales_ewm_alpha_05_lag_365   775500 non-null  float64       \n",
            " 78  sales_ewm_alpha_05_lag_546   685000 non-null  float64       \n",
            " 79  sales_ewm_alpha_05_lag_728   594000 non-null  float64       \n",
            "dtypes: datetime64[ns](1), float64(68), int64(11)\n",
            "memory usage: 592.0 MB\n"
          ]
        }
      ],
      "source": [
        "#Checking for null values\n",
        "df.info()"
      ],
      "id": "4c3a759f"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "2a8b0531"
      },
      "outputs": [],
      "source": [
        "#One-Hot Encoding\n",
        "df = pd.get_dummies(df, columns=['day_of_week', 'month'])"
      ],
      "id": "2a8b0531"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "d4e89f99"
      },
      "outputs": [],
      "source": [
        "#Converting sales to log(1+sales)\n",
        "df['sales'] = np.log1p(df[\"sales\"].values)"
      ],
      "id": "d4e89f99"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "a6995824"
      },
      "source": [
        "## 7. LightGBM Model"
      ],
      "id": "a6995824"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "b90334ff"
      },
      "outputs": [],
      "source": [
        "# Train data set until the beginning of 2017 (end of 2016)\n",
        "train = df.loc[(df[\"date\"] < \"2017-01-01\"), :]\n",
        "\n",
        "# First 3 months of 2017 validation set\n",
        "val = df.loc[(df[\"date\"] >= \"2017-01-01\") & (df[\"date\"] < \"2017-04-01\"), :]\n",
        "\n",
        "# Independent variables\n",
        "cols = [col for col in train.columns if col not in ['date', 'id', \"sales\", \"year\"]]"
      ],
      "id": "b90334ff"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7aad7fe7",
        "outputId": "d67f5877-e6ca-4148-abd7-18f6f13dbf72"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "((730500,), (730500, 94), (45000,), (45000, 94))"
            ]
          },
          "execution_count": 52,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Selecting the dependent variable for the train set\n",
        "Y_train = train['sales']\n",
        "\n",
        "# Selecting the argument for the train set\n",
        "X_train = train[cols]\n",
        "\n",
        "# choosing the dependent variable for the validation set\n",
        "Y_val = val['sales']\n",
        "\n",
        "# selecting the independent variable for the validation set\n",
        "X_val = val[cols] \n",
        "\n",
        "# Checking the shapes\n",
        "Y_train.shape, X_train.shape, Y_val.shape, X_val.shape"
      ],
      "id": "7aad7fe7"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "a5d2c181"
      },
      "outputs": [],
      "source": [
        "# Custom Cost Function\n",
        "\n",
        "def smape(preds, target):\n",
        "    n = len(preds)\n",
        "    masked_arr = ~((preds == 0) & (target == 0))\n",
        "    preds, target = preds[masked_arr], target[masked_arr]\n",
        "    num = np.abs(preds - target)\n",
        "    denom = np.abs(preds) + np.abs(target)\n",
        "    smape_val = (200 * np.sum(num / denom)) / n\n",
        "    return smape_val\n",
        "\n",
        "\n",
        "def lgbm_smape(preds, train_data):\n",
        "    labels = train_data.get_label()\n",
        "    smape_val = smape(np.expm1(preds), np.expm1(labels))\n",
        "    return 'SMAPE', smape_val, False\n"
      ],
      "id": "a5d2c181"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "3040e35f"
      },
      "outputs": [],
      "source": [
        "# LightGBM parameters\n",
        "lgb_params = {'metric': {'mae'},\n",
        "              'num_leaves': 10,\n",
        "              'learning_rate': 0.02,\n",
        "              'feature_fraction': 0.8,\n",
        "              'max_depth': 5,\n",
        "              'verbose': 0,\n",
        "              'num_boost_round': 10000, \n",
        "              'early_stopping_rounds': 200,\n",
        "              'nthread': -1}"
      ],
      "id": "3040e35f"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/"
        },
        "id": "f7890a9d",
        "outputId": "4b3f1d3c-ae55-4bc3-82df-9f9096a766fc"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[LightGBM] [Warning] Auto-choosing col-wise multi-threading, the overhead of testing was 0.663046 seconds.\n",
            "You can set `force_col_wise=true` to remove the overhead.\n",
            "Training until validation scores don't improve for 200 rounds\n",
            "[100]\ttraining's l1: 0.171432\ttraining's SMAPE: 17.485\tvalid_1's l1: 0.170891\tvalid_1's SMAPE: 17.4673\n",
            "[200]\ttraining's l1: 0.14128\ttraining's SMAPE: 14.471\tvalid_1's l1: 0.14491\tvalid_1's SMAPE: 14.866\n",
            "[300]\ttraining's l1: 0.135717\ttraining's SMAPE: 13.9136\tvalid_1's l1: 0.139925\tvalid_1's SMAPE: 14.3656\n",
            "[400]\ttraining's l1: 0.133676\ttraining's SMAPE: 13.7098\tvalid_1's l1: 0.13832\tvalid_1's SMAPE: 14.205\n",
            "[500]\ttraining's l1: 0.13246\ttraining's SMAPE: 13.5879\tvalid_1's l1: 0.137027\tvalid_1's SMAPE: 14.0752\n",
            "[600]\ttraining's l1: 0.131621\ttraining's SMAPE: 13.5037\tvalid_1's l1: 0.135995\tvalid_1's SMAPE: 13.9712\n",
            "[700]\ttraining's l1: 0.131016\ttraining's SMAPE: 13.4429\tvalid_1's l1: 0.135216\tvalid_1's SMAPE: 13.8927\n",
            "[800]\ttraining's l1: 0.130536\ttraining's SMAPE: 13.395\tvalid_1's l1: 0.134677\tvalid_1's SMAPE: 13.8385\n",
            "[900]\ttraining's l1: 0.130143\ttraining's SMAPE: 13.3555\tvalid_1's l1: 0.134271\tvalid_1's SMAPE: 13.7976\n",
            "[1000]\ttraining's l1: 0.129812\ttraining's SMAPE: 13.3224\tvalid_1's l1: 0.133964\tvalid_1's SMAPE: 13.7666\n",
            "[1100]\ttraining's l1: 0.129514\ttraining's SMAPE: 13.2927\tvalid_1's l1: 0.133684\tvalid_1's SMAPE: 13.7384\n",
            "[1200]\ttraining's l1: 0.129275\ttraining's SMAPE: 13.2687\tvalid_1's l1: 0.133477\tvalid_1's SMAPE: 13.7176\n",
            "[1300]\ttraining's l1: 0.129047\ttraining's SMAPE: 13.2459\tvalid_1's l1: 0.133318\tvalid_1's SMAPE: 13.7016\n",
            "[1400]\ttraining's l1: 0.128847\ttraining's SMAPE: 13.2259\tvalid_1's l1: 0.133134\tvalid_1's SMAPE: 13.6831\n",
            "[1500]\ttraining's l1: 0.128656\ttraining's SMAPE: 13.2068\tvalid_1's l1: 0.132971\tvalid_1's SMAPE: 13.6666\n",
            "[1600]\ttraining's l1: 0.128496\ttraining's SMAPE: 13.1909\tvalid_1's l1: 0.132823\tvalid_1's SMAPE: 13.6517\n",
            "[1700]\ttraining's l1: 0.128347\ttraining's SMAPE: 13.1759\tvalid_1's l1: 0.132702\tvalid_1's SMAPE: 13.6395\n",
            "[1800]\ttraining's l1: 0.128219\ttraining's SMAPE: 13.1631\tvalid_1's l1: 0.132579\tvalid_1's SMAPE: 13.6271\n",
            "[1900]\ttraining's l1: 0.128109\ttraining's SMAPE: 13.152\tvalid_1's l1: 0.132488\tvalid_1's SMAPE: 13.6179\n",
            "[2000]\ttraining's l1: 0.127995\ttraining's SMAPE: 13.1405\tvalid_1's l1: 0.132392\tvalid_1's SMAPE: 13.6083\n",
            "[2100]\ttraining's l1: 0.1279\ttraining's SMAPE: 13.1309\tvalid_1's l1: 0.132322\tvalid_1's SMAPE: 13.6012\n",
            "[2200]\ttraining's l1: 0.127796\ttraining's SMAPE: 13.1206\tvalid_1's l1: 0.132241\tvalid_1's SMAPE: 13.593\n",
            "[2300]\ttraining's l1: 0.127694\ttraining's SMAPE: 13.1103\tvalid_1's l1: 0.132188\tvalid_1's SMAPE: 13.5876\n",
            "[2400]\ttraining's l1: 0.1276\ttraining's SMAPE: 13.1009\tvalid_1's l1: 0.132113\tvalid_1's SMAPE: 13.5801\n",
            "[2500]\ttraining's l1: 0.127512\ttraining's SMAPE: 13.0921\tvalid_1's l1: 0.132065\tvalid_1's SMAPE: 13.5752\n",
            "[2600]\ttraining's l1: 0.127429\ttraining's SMAPE: 13.0837\tvalid_1's l1: 0.132011\tvalid_1's SMAPE: 13.5698\n",
            "[2700]\ttraining's l1: 0.127353\ttraining's SMAPE: 13.0761\tvalid_1's l1: 0.131968\tvalid_1's SMAPE: 13.5654\n",
            "[2800]\ttraining's l1: 0.127278\ttraining's SMAPE: 13.0686\tvalid_1's l1: 0.131938\tvalid_1's SMAPE: 13.5624\n",
            "[2900]\ttraining's l1: 0.1272\ttraining's SMAPE: 13.0608\tvalid_1's l1: 0.131885\tvalid_1's SMAPE: 13.557\n",
            "[3000]\ttraining's l1: 0.127132\ttraining's SMAPE: 13.0539\tvalid_1's l1: 0.131845\tvalid_1's SMAPE: 13.553\n",
            "[3100]\ttraining's l1: 0.127065\ttraining's SMAPE: 13.0471\tvalid_1's l1: 0.131813\tvalid_1's SMAPE: 13.5498\n",
            "[3200]\ttraining's l1: 0.127003\ttraining's SMAPE: 13.0409\tvalid_1's l1: 0.131782\tvalid_1's SMAPE: 13.5467\n",
            "[3300]\ttraining's l1: 0.12694\ttraining's SMAPE: 13.0345\tvalid_1's l1: 0.131749\tvalid_1's SMAPE: 13.5433\n",
            "[3400]\ttraining's l1: 0.126885\ttraining's SMAPE: 13.029\tvalid_1's l1: 0.131716\tvalid_1's SMAPE: 13.54\n",
            "[3500]\ttraining's l1: 0.126826\ttraining's SMAPE: 13.0231\tvalid_1's l1: 0.131688\tvalid_1's SMAPE: 13.5372\n",
            "[3600]\ttraining's l1: 0.126772\ttraining's SMAPE: 13.0176\tvalid_1's l1: 0.131669\tvalid_1's SMAPE: 13.5353\n",
            "[3700]\ttraining's l1: 0.126719\ttraining's SMAPE: 13.0122\tvalid_1's l1: 0.131639\tvalid_1's SMAPE: 13.5322\n",
            "[3800]\ttraining's l1: 0.126666\ttraining's SMAPE: 13.0068\tvalid_1's l1: 0.131616\tvalid_1's SMAPE: 13.5299\n",
            "[3900]\ttraining's l1: 0.126615\ttraining's SMAPE: 13.0017\tvalid_1's l1: 0.131589\tvalid_1's SMAPE: 13.5272\n",
            "[4000]\ttraining's l1: 0.126565\ttraining's SMAPE: 12.9967\tvalid_1's l1: 0.131566\tvalid_1's SMAPE: 13.5249\n",
            "[4100]\ttraining's l1: 0.126518\ttraining's SMAPE: 12.9918\tvalid_1's l1: 0.131546\tvalid_1's SMAPE: 13.5229\n",
            "[4200]\ttraining's l1: 0.126463\ttraining's SMAPE: 12.9864\tvalid_1's l1: 0.131525\tvalid_1's SMAPE: 13.5207\n",
            "[4300]\ttraining's l1: 0.126417\ttraining's SMAPE: 12.9817\tvalid_1's l1: 0.13149\tvalid_1's SMAPE: 13.5173\n",
            "[4400]\ttraining's l1: 0.126373\ttraining's SMAPE: 12.9772\tvalid_1's l1: 0.131475\tvalid_1's SMAPE: 13.5157\n",
            "[4500]\ttraining's l1: 0.126328\ttraining's SMAPE: 12.9726\tvalid_1's l1: 0.131448\tvalid_1's SMAPE: 13.513\n",
            "[4600]\ttraining's l1: 0.126286\ttraining's SMAPE: 12.9684\tvalid_1's l1: 0.131431\tvalid_1's SMAPE: 13.5113\n",
            "[4700]\ttraining's l1: 0.126242\ttraining's SMAPE: 12.9639\tvalid_1's l1: 0.131404\tvalid_1's SMAPE: 13.5086\n",
            "[4800]\ttraining's l1: 0.126201\ttraining's SMAPE: 12.9597\tvalid_1's l1: 0.131388\tvalid_1's SMAPE: 13.5069\n",
            "[4900]\ttraining's l1: 0.126159\ttraining's SMAPE: 12.9555\tvalid_1's l1: 0.131375\tvalid_1's SMAPE: 13.5056\n",
            "[5000]\ttraining's l1: 0.126114\ttraining's SMAPE: 12.9509\tvalid_1's l1: 0.131359\tvalid_1's SMAPE: 13.504\n",
            "[5100]\ttraining's l1: 0.126073\ttraining's SMAPE: 12.9468\tvalid_1's l1: 0.13134\tvalid_1's SMAPE: 13.5021\n",
            "[5200]\ttraining's l1: 0.126027\ttraining's SMAPE: 12.9422\tvalid_1's l1: 0.131323\tvalid_1's SMAPE: 13.5004\n",
            "[5300]\ttraining's l1: 0.125984\ttraining's SMAPE: 12.9378\tvalid_1's l1: 0.131314\tvalid_1's SMAPE: 13.4995\n",
            "[5400]\ttraining's l1: 0.125944\ttraining's SMAPE: 12.9338\tvalid_1's l1: 0.131298\tvalid_1's SMAPE: 13.4979\n",
            "[5500]\ttraining's l1: 0.125902\ttraining's SMAPE: 12.9295\tvalid_1's l1: 0.131287\tvalid_1's SMAPE: 13.4968\n",
            "[5600]\ttraining's l1: 0.125865\ttraining's SMAPE: 12.9257\tvalid_1's l1: 0.131274\tvalid_1's SMAPE: 13.4955\n",
            "[5700]\ttraining's l1: 0.125825\ttraining's SMAPE: 12.9216\tvalid_1's l1: 0.131267\tvalid_1's SMAPE: 13.4948\n",
            "[5800]\ttraining's l1: 0.125784\ttraining's SMAPE: 12.9175\tvalid_1's l1: 0.131257\tvalid_1's SMAPE: 13.4938\n",
            "[5900]\ttraining's l1: 0.125745\ttraining's SMAPE: 12.9135\tvalid_1's l1: 0.131246\tvalid_1's SMAPE: 13.4927\n",
            "[6000]\ttraining's l1: 0.125706\ttraining's SMAPE: 12.9095\tvalid_1's l1: 0.131227\tvalid_1's SMAPE: 13.4908\n",
            "[6100]\ttraining's l1: 0.125669\ttraining's SMAPE: 12.9058\tvalid_1's l1: 0.131212\tvalid_1's SMAPE: 13.4893\n",
            "[6200]\ttraining's l1: 0.125632\ttraining's SMAPE: 12.9021\tvalid_1's l1: 0.131208\tvalid_1's SMAPE: 13.4888\n",
            "[6300]\ttraining's l1: 0.125597\ttraining's SMAPE: 12.8985\tvalid_1's l1: 0.131194\tvalid_1's SMAPE: 13.4874\n",
            "[6400]\ttraining's l1: 0.125561\ttraining's SMAPE: 12.8948\tvalid_1's l1: 0.131183\tvalid_1's SMAPE: 13.4863\n",
            "[6500]\ttraining's l1: 0.125523\ttraining's SMAPE: 12.891\tvalid_1's l1: 0.131173\tvalid_1's SMAPE: 13.4853\n",
            "[6600]\ttraining's l1: 0.125489\ttraining's SMAPE: 12.8875\tvalid_1's l1: 0.131166\tvalid_1's SMAPE: 13.4846\n",
            "[6700]\ttraining's l1: 0.125454\ttraining's SMAPE: 12.884\tvalid_1's l1: 0.131153\tvalid_1's SMAPE: 13.4833\n",
            "[6800]\ttraining's l1: 0.125419\ttraining's SMAPE: 12.8803\tvalid_1's l1: 0.131144\tvalid_1's SMAPE: 13.4824\n",
            "[6900]\ttraining's l1: 0.125378\ttraining's SMAPE: 12.8763\tvalid_1's l1: 0.131138\tvalid_1's SMAPE: 13.4818\n",
            "[7000]\ttraining's l1: 0.125346\ttraining's SMAPE: 12.8729\tvalid_1's l1: 0.131125\tvalid_1's SMAPE: 13.4805\n",
            "[7100]\ttraining's l1: 0.12531\ttraining's SMAPE: 12.8693\tvalid_1's l1: 0.131111\tvalid_1's SMAPE: 13.479\n",
            "[7200]\ttraining's l1: 0.125277\ttraining's SMAPE: 12.8659\tvalid_1's l1: 0.131106\tvalid_1's SMAPE: 13.4786\n",
            "[7300]\ttraining's l1: 0.125244\ttraining's SMAPE: 12.8626\tvalid_1's l1: 0.131099\tvalid_1's SMAPE: 13.4779\n",
            "[7400]\ttraining's l1: 0.125213\ttraining's SMAPE: 12.8595\tvalid_1's l1: 0.131088\tvalid_1's SMAPE: 13.4767\n",
            "[7500]\ttraining's l1: 0.125179\ttraining's SMAPE: 12.856\tvalid_1's l1: 0.131085\tvalid_1's SMAPE: 13.4764\n",
            "[7600]\ttraining's l1: 0.125144\ttraining's SMAPE: 12.8525\tvalid_1's l1: 0.131078\tvalid_1's SMAPE: 13.4757\n",
            "[7700]\ttraining's l1: 0.125114\ttraining's SMAPE: 12.8493\tvalid_1's l1: 0.131072\tvalid_1's SMAPE: 13.4752\n",
            "[7800]\ttraining's l1: 0.125078\ttraining's SMAPE: 12.8457\tvalid_1's l1: 0.13106\tvalid_1's SMAPE: 13.4739\n",
            "[7900]\ttraining's l1: 0.125048\ttraining's SMAPE: 12.8427\tvalid_1's l1: 0.131056\tvalid_1's SMAPE: 13.4735\n",
            "[8000]\ttraining's l1: 0.125014\ttraining's SMAPE: 12.8392\tvalid_1's l1: 0.131046\tvalid_1's SMAPE: 13.4726\n",
            "[8100]\ttraining's l1: 0.124977\ttraining's SMAPE: 12.8355\tvalid_1's l1: 0.131039\tvalid_1's SMAPE: 13.4718\n",
            "[8200]\ttraining's l1: 0.124946\ttraining's SMAPE: 12.8323\tvalid_1's l1: 0.131036\tvalid_1's SMAPE: 13.4715\n",
            "[8300]\ttraining's l1: 0.124915\ttraining's SMAPE: 12.8291\tvalid_1's l1: 0.13103\tvalid_1's SMAPE: 13.4709\n",
            "[8400]\ttraining's l1: 0.124884\ttraining's SMAPE: 12.826\tvalid_1's l1: 0.131026\tvalid_1's SMAPE: 13.4705\n",
            "[8500]\ttraining's l1: 0.124853\ttraining's SMAPE: 12.8228\tvalid_1's l1: 0.131023\tvalid_1's SMAPE: 13.4702\n",
            "[8600]\ttraining's l1: 0.124823\ttraining's SMAPE: 12.8197\tvalid_1's l1: 0.131014\tvalid_1's SMAPE: 13.4693\n",
            "[8700]\ttraining's l1: 0.124794\ttraining's SMAPE: 12.8168\tvalid_1's l1: 0.131011\tvalid_1's SMAPE: 13.469\n"
          ]
        }
      ],
      "source": [
        "lgbtrain = lgb.Dataset(data=X_train, label=Y_train, feature_name=cols)\n",
        "lgbval = lgb.Dataset(data=X_val, label=Y_val, reference=lgbtrain, feature_name=cols)\n",
        "\n",
        "model = lgb.train(lgb_params, lgbtrain,\n",
        "                  valid_sets=[lgbtrain, lgbval],\n",
        "                  num_boost_round=lgb_params['num_boost_round'],\n",
        "                  early_stopping_rounds=lgb_params['early_stopping_rounds'],\n",
        "                  feval=lgbm_smape, \n",
        "                  verbose_eval=100)\n",
        "\n",
        "y_pred_val = model.predict(X_val, num_iteration=model.best_iteration)\n",
        "\n",
        "# percentage of validation error\n",
        "smape(np.expm1(y_pred_val), np.expm1(Y_val))"
      ],
      "id": "f7890a9d"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0e142746"
      },
      "source": [
        "### Final Model"
      ],
      "id": "0e142746"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "55d63960"
      },
      "outputs": [],
      "source": [
        "# determination of test and train dependent/independent variables\n",
        "\n",
        "train = df.loc[~df.sales.isna()]\n",
        "Y_train = train['sales']\n",
        "X_train = train[cols]\n",
        "\n",
        "test = df.loc[df.sales.isna()]\n",
        "X_test = test[cols]"
      ],
      "id": "55d63960"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "43e6c24a"
      },
      "outputs": [],
      "source": [
        "lgb_params = {'metric': {'mae'},\n",
        "              'num_leaves': 10,\n",
        "              'learning_rate': 0.02,\n",
        "              'feature_fraction': 0.8,\n",
        "              'max_depth': 5,\n",
        "              'verbose': 0,\n",
        "              'nthread': -1,\n",
        "              \"num_boost_round\": model.best_iteration}\n",
        "\n",
        "# LightGBM dataset\n",
        "lgbtrain_all = lgb.Dataset(data=X_train, label=Y_train, feature_name=cols)\n",
        "\n",
        "model = lgb.train(lgb_params, lgbtrain_all, num_boost_round=model.best_iteration)\n",
        "test_preds = model.predict(X_test, num_iteration=model.best_iteration)"
      ],
      "id": "43e6c24a"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "70823920"
      },
      "source": [
        "## 8. Time Series Analysis\n",
        "\n",
        "* In this section, first of all, the train data set will be reduced to a weekly basis.\n",
        "* Then, using the weekly data set, respectively:\n",
        "* LightGBM Model\n",
        "* Single Exponential Smoothing\n",
        "* Double Exponential Smoothing\n",
        "* Triple Exponential Smoothing\n",
        "* ARIMA\n",
        "* Sales demand forecasting models for 2017 will be created with SARIMA.\n",
        "* Actual values ​​will be compared with estimated values.\n"
      ],
      "id": "70823920"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cf13bd9d"
      },
      "source": [
        "### Load Dataset and EDA"
      ],
      "id": "cf13bd9d"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "688ad553"
      },
      "outputs": [],
      "source": [
        "data = pd.read_csv('../input/demand-forecasting-kernels-only/train.csv', parse_dates=['date'])\n",
        "data.head()\n",
        "data.shape\n",
        "\n",
        "# reduce dataset to weekly\n",
        "data.set_index(\"date\",inplace=True)\n",
        "df= data.resample(\"W\").mean()\n",
        "df.reset_index(inplace=True)\n",
        "df.head()\n",
        "df.shape\n",
        "\n",
        "df.index.freq = \"W\"\n",
        "df.head()"
      ],
      "id": "688ad553"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "c2489b56"
      },
      "outputs": [],
      "source": [
        "df.shape"
      ],
      "id": "c2489b56"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5be06d52"
      },
      "source": [
        "### Feature Engineering"
      ],
      "id": "5be06d52"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "8af6b138"
      },
      "outputs": [],
      "source": [
        "# Month\n",
        "df['month'] = df.date.dt.month\n",
        "# Day of Month\n",
        "df['day_of_month'] = df.date.dt.day\n",
        "# Day of year\n",
        "df['day_of_year'] = df.date.dt.dayofyear\n",
        "# Week of year\n",
        "df['week_of_year'] = df.date.dt.weekofyear\n",
        "# Day of week\n",
        "df['day_of_week'] = df.date.dt.dayofweek\n",
        "# Year\n",
        "df['year'] = df.date.dt.year\n",
        "# Weekend check\n",
        "df[\"is_wknd\"] = df.date.dt.weekday // 4\n",
        "# Month start check\n",
        "df['is_month_start'] = df.date.dt.is_month_start.astype(int)\n",
        "# Month end check\n",
        "df['is_month_end'] = df.date.dt.is_month_end.astype(int)\n",
        "\n",
        "# Lag/Shifted Features (Delays)\n",
        "def lag_features(dataframe, lags):\n",
        "    for lag in lags:\n",
        "        dataframe['sales_lag_' + str(lag)] = dataframe['sales'].transform(\n",
        "            lambda x: x.shift(lag)) + random_noise(dataframe)\n",
        "    return dataframe\n",
        "\n",
        "df = lag_features(df, [31, 61, 91, 98, 105, 112])\n",
        "\n",
        "\n",
        "# Moving Average Features\n",
        "def roll_mean_features(dataframe, windows):\n",
        "    for window in windows:\n",
        "        dataframe['sales_roll_mean_' + str(window)] = dataframe['sales']. \\\n",
        "                                                          transform(\n",
        "            lambda x: x.shift(1).rolling(window=window, min_periods=10, win_type=\"triang\").mean()) + random_noise(\n",
        "            dataframe)\n",
        "    return dataframe\n",
        "\n",
        "\n",
        "df = roll_mean_features(df, [31, 61, 91, 98, 105, 112])\n",
        "\n",
        "\n",
        "# Exponentially Weighted Mean Features\n",
        "def ewm_features(dataframe, alphas, lags):\n",
        "    for alpha in alphas:\n",
        "        for lag in lags:\n",
        "            dataframe['sales_ewm_alpha_' + str(alpha).replace(\".\", \"\") + \"_lag_\" + str(lag)] = \\\n",
        "                dataframe['sales'].transform(lambda x: x.shift(lag).ewm(alpha=alpha).mean())\n",
        "    return dataframe\n",
        "\n",
        "\n",
        "alphas = [0.99, 0.95, 0.9, 0.8, 0.7, 0.5]\n",
        "lags = [10, 20, 30, 40, 50]\n",
        "\n",
        "df = ewm_features(df, alphas, lags)\n",
        "\n",
        "df.tail()\n"
      ],
      "id": "8af6b138"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "548d858a"
      },
      "source": [
        "### LightGBM Model"
      ],
      "id": "548d858a"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "7a31c8c1"
      },
      "outputs": [],
      "source": [
        "# One-Hot Encoding\n",
        "df = pd.get_dummies(df, columns=['day_of_week', 'month'])\n",
        "\n",
        "# Converting sales to log(1+sales)\n",
        "df['sales'] = np.log1p(df[\"sales\"].values)\n",
        "\n",
        "# train-test data selection\n",
        "train = df.loc[(df[\"date\"] < \"2017-01-01\"), :]\n",
        "test = df.loc[(df[\"date\"] >= \"2017-01-01\"), :]\n",
        "\n",
        "# Dependent and Independent variables\n",
        "cols = [col for col in train.columns if col not in ['date', \"sales\", \"year\"]]\n",
        "X_train = train[cols]\n",
        "Y_train = train['sales']\n",
        "X_test = test[cols]\n",
        "Y_test = test[\"sales\"]\n"
      ],
      "id": "7a31c8c1"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "45df8046"
      },
      "outputs": [],
      "source": [
        "# LightGBM parameters\n",
        "lgb_params = {'metric': {'mae'},\n",
        "              'num_leaves': 10,\n",
        "              'learning_rate': 0.02,\n",
        "              'feature_fraction': 0.8,\n",
        "              'max_depth': 5,\n",
        "              'verbose': 0,\n",
        "              'num_boost_round': 10000, \n",
        "              'early_stopping_rounds': 200, \n",
        "              'nthread': -1}\n",
        "\n",
        "lgbtrain = lgb.Dataset(data=X_train, label=Y_train, feature_name=cols)\n",
        "lgbval = lgb.Dataset(data=X_test, label=Y_test, reference=lgbtrain, feature_name=cols)\n",
        "\n",
        "model = lgb.train(lgb_params, lgbtrain,\n",
        "                  valid_sets=[lgbtrain, lgbval],\n",
        "                  num_boost_round=lgb_params['num_boost_round'],\n",
        "                  early_stopping_rounds=lgb_params['early_stopping_rounds'],\n",
        "                  feval=lgbm_smape, \n",
        "                  verbose_eval=100)\n",
        "\n",
        "y_pred_test = model.predict(X_test, num_iteration=model.best_iteration)\n",
        "\n",
        "# percentage of test error\n",
        "smape(np.expm1(y_pred_test), np.expm1(Y_test))\n"
      ],
      "id": "45df8046"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "31ab59df"
      },
      "source": [
        "### Feature Importance"
      ],
      "id": "31ab59df"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "7631841c"
      },
      "outputs": [],
      "source": [
        "def plot_lgb_importances(model, plot=False, num=10):\n",
        "\n",
        "    gain = model.feature_importance('gain')\n",
        "    feat_imp = pd.DataFrame({'feature': model.feature_name(),\n",
        "                             'split': model.feature_importance('split'),\n",
        "                             'gain': 100 * gain / gain.sum()}).sort_values('gain', ascending=False)\n",
        "    if plot:\n",
        "        plt.figure(figsize=(10, 10))\n",
        "        sns.set(font_scale=1)\n",
        "        sns.barplot(x=\"gain\", y=\"feature\", data=feat_imp[0:25])\n",
        "        plt.title('feature')\n",
        "        plt.tight_layout()\n",
        "        plt.show()\n",
        "    else:\n",
        "        print(feat_imp.head(num))\n",
        "\n",
        "\n",
        "plot_lgb_importances(model, num=30)\n",
        "#plot_lgb_importances(model, num=30, plot=True)\n",
        "\n",
        "lgb.plot_importance(model, max_num_features=20, figsize=(10, 10), importance_type=\"gain\")\n",
        "plt.show()\n"
      ],
      "id": "7631841c"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "9b4c5ba4"
      },
      "outputs": [],
      "source": [
        "# Final Model\n",
        "\n",
        "lgb_params = {'metric': {'mae'},\n",
        "              'num_leaves': 10,\n",
        "              'learning_rate': 0.02,\n",
        "              'feature_fraction': 0.8,\n",
        "              'max_depth': 5,\n",
        "              'verbose': 0,\n",
        "              'nthread': -1,\n",
        "              \"num_boost_round\": model.best_iteration}\n",
        "\n",
        "# LightGBM dataset\n",
        "lgbtrain_all = lgb.Dataset(data=X_train, label=Y_train, feature_name=cols)\n",
        "\n",
        "model = lgb.train(lgb_params, lgbtrain_all, num_boost_round=model.best_iteration)\n",
        "test_preds = model.predict(X_test, num_iteration=model.best_iteration)\n"
      ],
      "id": "9b4c5ba4"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "81622a96"
      },
      "source": [
        "## Here is the prediction!"
      ],
      "id": "81622a96"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "74bb0356"
      },
      "outputs": [],
      "source": [
        "# 1 year actual and predicted values\n",
        "forecast = pd.DataFrame({\"date\":test[\"date\"],\n",
        "                        \"store\":test[\"store\"],\n",
        "                        \"item\":test[\"item\"],\n",
        "                        \"sales\":test_preds\n",
        "                        })\n",
        "\n",
        "df.set_index(\"date\").sales.plot(figsize = (20,9),legend=True, label = \"Actual\")\n",
        "forecast.set_index(\"date\").sales.plot(legend=True, label = \"Predict\")\n",
        "plt.show()"
      ],
      "id": "74bb0356"
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.10"
    },
    "papermill": {
      "default_parameters": {},
      "duration": 2170.42965,
      "end_time": "2021-10-14T21:06:34.632238",
      "environment_variables": {},
      "exception": null,
      "input_path": "__notebook__.ipynb",
      "output_path": "__notebook__.ipynb",
      "parameters": {},
      "start_time": "2021-10-14T20:30:24.202588",
      "version": "2.3.3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}